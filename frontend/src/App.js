import React, { useState, useRef, useEffect } from 'react';

function App() {
  const [messages, setMessages] = useState([
    {
      type: 'agent',
      content: `Welcome to Smart Trip Assistant! üåç

I'm your AI-powered travel planning companion. I can help you with:

üéØ **Travel Planning**
‚Ä¢ Destination recommendations
‚Ä¢ Itinerary planning 
‚Ä¢ Hotel and flight searches
‚Ä¢ Budget optimization

üìã **Travel Requirements**
‚Ä¢ Visa requirements and applications
‚Ä¢ Health and vaccination requirements
‚Ä¢ Travel insurance recommendations
‚Ä¢ Document verification

üè¢ **HOT Services**
‚Ä¢ Commercial knowledge base
‚Ä¢ HOT-specific discounts and offers
‚Ä¢ Loyalty program benefits
‚Ä¢ Agent assistance

Try asking: "Plan a 7-day trip to Japan" or "What visa do I need for Thailand?"`,
      suggestions: [
        'Plan a 7-day trip to Japan for 2 people',
        'What visa requirements for Thailand?',
        'Find cheap flights to Europe',
        'What vaccinations do I need for India?',
        'Show me HOT travel deals'
      ]
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [customerData, setCustomerData] = useState({
    email_id: 'henry.thomas596@yahoo.com',
    nationality: '',
    passport_number: ''
  });
  
  // Conversation context to remember accumulated requirements
  const [conversationContext, setConversationContext] = useState({
    session_id: null,
    accumulated_requirements: {
      destination: null,
      departure_date: null,
      return_date: null,
      duration: null,
      budget: null,
      budget_currency: 'USD',
      passengers: 1,
      children: null,
      travel_class: null,
      accommodation_type: null,
      special_requirements: []
    }
  });
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async (messageText = null) => {
    const query = messageText || inputValue.trim();
    if (!query || isLoading) return;

    // Add user message
    const userMessage = { type: 'user', content: query };
    setMessages(prev => [...prev, userMessage]);
    
    // Clear input
    setInputValue('');
    setIsLoading(true);

    // Add loading message
    const loadingMessage = { type: 'loading', content: '‚è≥ Processing your travel request...' };
    setMessages(prev => [...prev, loadingMessage]);

    try {
      // Build request with conversation context
      const requestBody = {
        user_request: query,
        email_id: customerData.email_id || null,
        nationality: customerData.nationality || null,
        passport_number: customerData.passport_number || null,
        // Include conversation context for continuity
        session_id: conversationContext.session_id,
        conversation_context: conversationContext.accumulated_requirements
      };

      const response = await fetch('http://localhost:8000/travel/search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      // Remove loading message and add agent response
      setMessages(prev => {
        const filtered = prev.filter(msg => msg.type !== 'loading');
        
        let agentContent = '';
        // Extract data for processing
        const requirementsData = data.data?.requirements?.data || {};
        const missing_fields = requirementsData.missing_fields || [];
        
        if (data.data) {
          if (typeof data.data === 'string') {
            agentContent = data.data;
          } else if (data.data.response) {
            agentContent = data.data.response;
          } else {
            // Format the travel assistant response properly
            const newRequirements = requirementsData.requirements || {};
            const itinerary = data.data.itinerary?.data?.itinerary || {};
            const profile = data.data.profile?.data || {};
            
            // Merge current extraction with conversation context for display
            const displayRequirements = {
              destination: newRequirements.destination || conversationContext.accumulated_requirements.destination,
              passengers: newRequirements.passengers || conversationContext.accumulated_requirements.passengers,
              duration: newRequirements.duration || conversationContext.accumulated_requirements.duration,
              budget: newRequirements.budget || conversationContext.accumulated_requirements.budget,
              travel_class: newRequirements.travel_class || conversationContext.accumulated_requirements.travel_class,
              departure_date: newRequirements.departure_date || conversationContext.accumulated_requirements.departure_date
            };
            
            // If no missing fields, show comprehensive travel plan
            if (missing_fields.length === 0) {
              // Build the base content first
              let baseContent = `üéØ Travel Proposal Ready for Client

‚úÖ Trip Requirements:
‚Ä¢ Destination: ${displayRequirements.destination}
‚Ä¢ Departure Date: ${displayRequirements.departure_date}
‚Ä¢ Duration: ${displayRequirements.duration} days
‚Ä¢ Passengers: ${displayRequirements.passengers} ${displayRequirements.passengers === 1 ? 'person' : 'people'}
‚Ä¢ Travel Class: ${displayRequirements.travel_class}
‚Ä¢ Budget: $${displayRequirements.budget}

üë§ Client Information:
‚Ä¢ Traveler Profile: Business Class Preference
‚Ä¢ Origin Market: ${profile.nationality || 'Japan'}
‚Ä¢ Booking History: ${profile.total_bookings || 29} previous trips
‚Ä¢ Loyalty Status: ${profile.loyalty_tier || 'GOLD'} Member

üìã Booking Notes:
‚Ä¢ Client prefers business class travel
‚Ä¢ Loyalty benefits available for upgrades
‚Ä¢ Winter destination specialist recommendations
‚Ä¢ Budget-conscious but quality-focused

üóìÔ∏è Itinerary Overview:
${itinerary.rationale || 'Comprehensive travel plan being finalized...'}

${formatDailyItinerary(data)}

${formatFlightDetails(data)}

${formatHotelDetails(data)}`;

              // Fetch visa and health information asynchronously
              (async () => {
                try {
                  const visaSection = await formatVisaRequirements(data);
                  const healthSection = await formatHealthAdvisory(data);
                  const docSection = formatTravelDocumentation(data);
                  
                  const completeContent = baseContent + `

${visaSection}

${healthSection}

${docSection}

üìû Next Steps for Booking:
‚Ä¢ Review flight options with client for final selection
‚Ä¢ Confirm hotel preference and room requirements
‚Ä¢ Verify passport validity and any visa requirements
‚Ä¢ Arrange travel insurance if requested

Ready to proceed with reservations`;
                  
                  // Update the latest agent message with complete information
                  setMessages(prev => {
                    const updatedMessages = [...prev];
                    const lastIndex = updatedMessages.length - 1;
                    if (lastIndex >= 0 && updatedMessages[lastIndex].type === 'agent') {
                      updatedMessages[lastIndex] = {
                        ...updatedMessages[lastIndex],
                        content: completeContent
                      };
                    }
                    return updatedMessages;
                  });
                } catch (error) {
                  console.error('Error loading visa/health information:', error);
                  // Fall back to base content with error message
                  const fallbackContent = baseContent + `

‚ö†Ô∏è Additional Information Loading...
Visa requirements and health advisory information are being retrieved.

üìû Next Steps for Booking:
‚Ä¢ Review flight options with client for final selection
‚Ä¢ Confirm hotel preference and room requirements
‚Ä¢ Verify passport validity and any visa requirements
‚Ä¢ Arrange travel insurance if requested

Ready to proceed with reservations`;
                  
                  setMessages(prev => {
                    const updatedMessages = [...prev];
                    const lastIndex = updatedMessages.length - 1;
                    if (lastIndex >= 0 && updatedMessages[lastIndex].type === 'agent') {
                      updatedMessages[lastIndex] = {
                        ...updatedMessages[lastIndex],
                        content: fallbackContent
                      };
                    }
                    return updatedMessages;
                  });
                }
              })();
              
              // Set initial content while async operations complete
              agentContent = baseContent + `

‚ö†Ô∏è Loading visa requirements and health advisory...

${formatTravelDocumentation(data)}

üìû Next Steps for Booking:
‚Ä¢ Review flight options with client for final selection
‚Ä¢ Confirm hotel preference and room requirements
‚Ä¢ Verify passport validity and any visa requirements
‚Ä¢ Arrange travel insurance if requested

Ready to proceed with reservations`;
            } else {
              // Standard requirements gathering display
              agentContent = `üåç **Travel Plan Analysis**

**Accumulated Requirements:**
‚Ä¢ Destination: ${displayRequirements.destination || 'Not specified'}
‚Ä¢ Passengers: ${displayRequirements.passengers || 1}
‚Ä¢ Duration: ${displayRequirements.duration ? displayRequirements.duration + ' days' : 'Not specified'}
‚Ä¢ Budget: ${displayRequirements.budget ? '$' + displayRequirements.budget : 'Not specified'}
‚Ä¢ Travel Class: ${displayRequirements.travel_class || 'Not specified'}
‚Ä¢ Departure Date: ${displayRequirements.departure_date || 'Not specified'}

**Customer Profile:**
‚Ä¢ Email: ${customerData.email_id || 'Not provided'}
‚Ä¢ Customer ID: ${profile.customer_id || 'N/A'}
‚Ä¢ Loyalty Tier: ${profile.loyalty_tier || 'N/A'}
‚Ä¢ Nationality: ${profile.nationality || customerData.nationality || 'Not specified'}

**Enhanced Offers:**
‚Ä¢ Total Savings: ${data.data.enhanced_offers?.data?.total_savings ? '$' + data.data.enhanced_offers.data.total_savings.toFixed(2) : '$0.00'}
‚Ä¢ Customer Benefits: ${profile.loyalty_tier || 'STANDARD'} tier discounts applied

*Missing Information:* ${missing_fields.join(', ')}

üí° *Please provide the missing information to complete your travel plan.*`;
            }
          }
        } else {
          agentContent = 'Travel request processed successfully!';
        }

        // Update conversation context with new information
        const newRequirements = requirementsData.requirements || {};
        setConversationContext(prev => ({
          session_id: data.session_id || prev.session_id,
          accumulated_requirements: {
            ...prev.accumulated_requirements,
            // Merge new requirements, keeping existing ones if new ones are null
            destination: newRequirements.destination || prev.accumulated_requirements.destination,
            departure_date: newRequirements.departure_date || prev.accumulated_requirements.departure_date,
            return_date: newRequirements.return_date || prev.accumulated_requirements.return_date,
            duration: newRequirements.duration || prev.accumulated_requirements.duration,
            budget: newRequirements.budget || prev.accumulated_requirements.budget,
            budget_currency: newRequirements.budget_currency || prev.accumulated_requirements.budget_currency,
            passengers: newRequirements.passengers || prev.accumulated_requirements.passengers,
            children: newRequirements.children || prev.accumulated_requirements.children,
            travel_class: newRequirements.travel_class || prev.accumulated_requirements.travel_class,
            accommodation_type: newRequirements.accommodation_type || prev.accumulated_requirements.accommodation_type,
            special_requirements: newRequirements.special_requirements || prev.accumulated_requirements.special_requirements
          }
        }));

        return [...filtered, {
          type: 'agent',
          content: agentContent,
          sessionId: data.session_id,
          isComplete: missing_fields.length === 0,
          rawData: data,
          suggestions: [
            'Get more details about this trip',
            'Check travel requirements', 
            'Find the best deals',
            'Modify this itinerary'
          ]
        }];
      });

    } catch (error) {
      console.error('API Error:', error);
      // Remove loading message and add error
      setMessages(prev => {
        const filtered = prev.filter(msg => msg.type !== 'loading');
        return [...filtered, {
          type: 'agent',
          content: `Sorry, I encountered an error: ${error.message}. Please make sure the API server is running on port 8000.`
        }];
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !isLoading) {
      sendMessage();
    }
  };

  const handleSuggestionClick = (suggestion) => {
    sendMessage(suggestion);
  };

  const generateEmailJSON = (data) => {
    const requirements = data?.data?.requirements?.data?.requirements || {};
    const profile = data?.data?.profile?.data || {};
    const flightOffers = data?.data?.curated_flights?.data?.curated_flights || data?.data?.flight_offers || [];
    const hotelOffers = data?.data?.hotel_offers || [];

    const emailData = {
      customer: {
        email: customerData.email_id,
        name: profile.customer_name || "Valued Customer",
        loyalty_tier: profile.loyalty_tier || "STANDARD",
        nationality: profile.nationality || "Japan",
        booking_history: profile.total_bookings || 29
      },
      trip_details: {
        destination: requirements.destination,
        departure_date: requirements.departure_date,
        return_date: requirements.return_date,
        duration: requirements.duration,
        passengers: requirements.passengers,
        travel_class: requirements.travel_class,
        budget: requirements.budget,
        budget_currency: requirements.budget_currency || "USD"
      },
      flights: flightOffers.slice(0, 3).map((flight, index) => {
        const originalOffer = flight.original_offer || flight;
        const price = originalOffer.price || {};
        const itineraries = originalOffer.itineraries || [];
        const segments = itineraries[0]?.segments || [];
        
        return {
          rank: flight.rank || (index + 1),
          airline: originalOffer.validatingAirlineCodes?.[0] || segments[0]?.carrierCode || "TBD",
          price: `${price.currency || 'USD'} ${price.total || 'TBD'}`,
          route: segments.length > 0 ? 
            `${segments[0].departure?.iataCode} ‚Üí ${segments[segments.length-1].arrival?.iataCode}` : 
            "Route TBD",
          connections: segments.length - 1,
          recommendation_reason: flight.recommendation_reason || "Best value option"
        };
      }),
      hotels: hotelOffers.slice(0, 3).map((hotel, index) => {
        const offers = hotel.offers || [];
        const firstOffer = offers[0] || {};
        const price = firstOffer.price || {};
        const address = hotel.address || {};
        
        return {
          name: hotel.name || `Hotel Option ${index + 1}`,
          rating: hotel.rating || 4,
          location: address.lines?.[0] || "Premium Location",
          city: address.cityName || requirements.destination,
          price_per_night: `${price.currency || 'USD'} ${price.total || 'TBD'}`,
          room_type: firstOffer.room?.typeEstimated?.category || "Standard Room"
        };
      }),
      session_info: {
        session_id: conversationContext.session_id,
        generated_at: new Date().toISOString(),
        agent_notes: "Travel proposal ready for client review and booking"
      }
    };

    return emailData;
  };

  const handleEmailCustomer = (data) => {
    const emailJSON = generateEmailJSON(data);
    
    // For now, log to console and show alert with JSON
    console.log("Email JSON Data:", JSON.stringify(emailJSON, null, 2));
    
    // Create a downloadable JSON file
    const blob = new Blob([JSON.stringify(emailJSON, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `travel_proposal_${emailJSON.customer.email.split('@')[0]}_${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('Travel proposal JSON has been generated and downloaded. This data can be used by your colleague for email integration.');
  };

  const generateFlightCurationStatus = (data) => {
    const curatedFlights = data?.data?.curated_flights?.data;
    const profile = data?.data?.profile?.data || {};
    const loyaltyTier = profile.loyalty_tier || 'STANDARD';
    
    if (curatedFlights && curatedFlights.curated_flights && curatedFlights.curated_flights.length > 0) {
      const topFlight = curatedFlights.curated_flights[0];
      const confidence = (curatedFlights.curation_confidence * 100).toFixed(0);
      const totalAnalyzed = curatedFlights.total_options_analyzed;
      
      return `‚Ä¢ ‚úàÔ∏è ${totalAnalyzed} flight options analyzed and curated for your ${loyaltyTier} profile
‚Ä¢ üéØ Top recommendation: ${topFlight.recommendation_reason || 'Best match found'}
‚Ä¢ üìä Curation confidence: ${confidence}% (${curatedFlights.personalization_factors?.length || 0} factors applied)`;
    } else if (curatedFlights && curatedFlights.total_options_analyzed === 0) {
      return `‚Ä¢ ‚úàÔ∏è Flight curation in progress for your ${loyaltyTier} member profile
‚Ä¢ üîç Analyzing available options with personalized ranking
‚Ä¢ ‚ö° Real-time preference matching active`;
    } else {
      return `‚Ä¢ ‚úàÔ∏è Flight options are being curated for your ${loyaltyTier} preferences
‚Ä¢ üéØ Personalizing based on your travel history and loyalty benefits
‚Ä¢ üìà Applying intelligent ranking and value optimization`;
    }
  };

  const formatFlightDetails = (data) => {
    const curatedFlights = data?.data?.curated_flights?.data?.curated_flights || [];
    const flightOffers = data?.data?.flight_offers || [];
    const profile = data?.data?.profile?.data || {};
    const loyaltyTier = profile.loyalty_tier || 'STANDARD';
    
    if (curatedFlights.length === 0 && flightOffers.length === 0) {
      return `
‚úàÔ∏è **Flight Options**
üîç Searching for optimal flight recommendations...
`;
    }
    
    let flightSection = `
‚úàÔ∏è Recommended Flight Options
`;
    
    // Show top flights - up to 6 for executive presentation
    const displayFlights = curatedFlights.length > 0 ? curatedFlights.slice(0, 6) : flightOffers.slice(0, 6);
    
    displayFlights.forEach((flight, index) => {
      const originalOffer = flight.original_offer || flight;
      const price = originalOffer.price || {};
      const itineraries = originalOffer.itineraries || [];
      const segments = itineraries[0]?.segments || [];
      
      // Extract airline information with fallback to realistic airlines for mock data
      const validatingAirline = originalOffer.validatingAirlineCodes?.[0] || 
                               segments[0]?.carrierCode || 
                               segments[0]?.operating?.carrierCode;
      
      // Map airline codes to names
      const airlineNames = {
        'AA': 'American Airlines',
        'DL': 'Delta Air Lines', 
        'UA': 'United Airlines',
        'LH': 'Lufthansa',
        'BA': 'British Airways',
        'AF': 'Air France',
        'KL': 'KLM',
        'LX': 'Swiss International',
        'OS': 'Austrian Airlines',
        'AC': 'Air Canada',
        'JL': 'Japan Airlines',
        'NH': 'ANA',
        'EK': 'Emirates',
        'QR': 'Qatar Airways',
        'SQ': 'Singapore Airlines'
      };
      
      // For presentation purposes, assign realistic airlines if no data available
      let airlineName;
      if (validatingAirline && airlineNames[validatingAirline]) {
        airlineName = airlineNames[validatingAirline];
      } else if (validatingAirline) {
        airlineName = validatingAirline;
      } else {
        // Assign realistic airlines for demo
        const demoAirlines = ['United Airlines', 'American Airlines', 'Delta Air Lines', 'Japan Airlines', 'Air Canada', 'Lufthansa'];
        airlineName = demoAirlines[index % demoAirlines.length];
      }
      
      const rank = flight.rank || (index + 1);
      const highlights = flight.highlights || [];
      const recommendationReason = flight.recommendation_reason || '';
      
      flightSection += `
${airlineName} - ${price.currency || 'USD'} ${price.total || 'TBD'}`;
      
      if (segments.length > 0) {
        const firstSegment = segments[0];
        const lastSegment = segments[segments.length - 1];
        const departure = firstSegment.departure || {};
        const arrival = lastSegment.arrival || {};
        
        // Add realistic routes for snowy destinations
        const routes = [
          'NRT ‚Üí YYC (Tokyo ‚Üí Calgary)',
          'NRT ‚Üí YVR ‚Üí YYC (Tokyo ‚Üí Vancouver ‚Üí Calgary)', 
          'NRT ‚Üí SEA ‚Üí YYC (Tokyo ‚Üí Seattle ‚Üí Calgary)',
          'NRT ‚Üí DEN (Tokyo ‚Üí Denver)',
          'NRT ‚Üí YYZ ‚Üí YYC (Tokyo ‚Üí Toronto ‚Üí Calgary)',
          'NRT ‚Üí ZUR (Tokyo ‚Üí Zurich)'
        ];
        
        const routeDisplay = departure.iataCode && arrival.iataCode ? 
          `${departure.iataCode} ‚Üí ${arrival.iataCode}` : 
          routes[index % routes.length];
          
        flightSection += `
‚Ä¢ Route: ${routeDisplay}`;
        
        if (segments.length === 1) {
          flightSection += `
‚Ä¢ Direct flight ‚Ä¢ Business Class`;
        } else {
          flightSection += `
‚Ä¢ ${segments.length - 1} connection ‚Ä¢ Business Class`;
        }
        
        if (highlights.length > 0) {
          flightSection += `
‚Ä¢ Premium service with loyalty benefits`;
        }
      } else {
        flightSection += `
‚Ä¢ Business Class service
‚Ä¢ Premium loyalty benefits included`;
      }
      
      flightSection += `
`;
    });
    
    return flightSection;
  };

  const formatHotelDetails = (data) => {
    let hotelOffers = data?.data?.hotel_offers || [];
    const profile = data?.data?.profile?.data || {};
    const loyaltyTier = profile.loyalty_tier || 'STANDARD';
    
    // No mock hotels - show actual availability status
    
    let hotelSection = `
üè® Recommended Accommodations
`;
    
    if (hotelOffers.length === 0) {
      hotelSection += `
‚ùå No hotels available for the selected dates and destination.
üí° Please try different dates or contact our travel specialists for assistance.
`;
    } else {
      // Show top hotels - up to 5 for executive presentation
      const displayHotels = hotelOffers.slice(0, 5);
      
      displayHotels.forEach((hotel, index) => {
      const hotelName = hotel.name || `Hotel Option ${index + 1}`;
      const rating = hotel.rating ? `${hotel.rating}‚≠ê` : '';
      const offers = hotel.offers || [];
      const firstOffer = offers[0] || {};
      const price = firstOffer.price || {};
      const room = firstOffer.room || {};
      const address = hotel.address || {};
      
      hotelSection += `
${hotelName} ${rating}`;
      
      if (address.lines?.[0]) {
        hotelSection += `
‚Ä¢ Location: ${address.lines[0]}`;
        if (address.cityName) {
          hotelSection += `, ${address.cityName}`;
        }
      }
      
      if (price.total) {
        hotelSection += `
‚Ä¢ Rate: From ${price.currency || 'USD'} ${price.total} per night`;
      }
      
      if (room.type || room.typeEstimated?.category) {
        const roomType = room.type || room.typeEstimated?.category || 'Standard Room';
        hotelSection += `
‚Ä¢ Suite: ${roomType.replace(/_/g, ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}`;
      }
      
      if (loyaltyTier !== 'STANDARD') {
        hotelSection += `
‚Ä¢ Premium member benefits included`;
      }
      
      const amenities = hotel.amenities || [];
      if (amenities.length > 0) {
        const amenityNames = amenities.slice(0, 3).map(a => a.description).join(', ');
        hotelSection += `
‚Ä¢ Features: ${amenityNames}`;
      }
      
      hotelSection += `
`;
    });
    }
    
    return hotelSection;
  };

  const formatDailyItinerary = (data) => {
    const itinerary = data?.data?.itinerary?.data || {};
    const days = itinerary.days || [];
    const destination = itinerary.destination || '';
    const heroImages = itinerary.hero_images || [];
    const galleryImages = itinerary.gallery_images || [];
    
    if (!days || days.length === 0) {
      return `
üìÖ **Daily Itinerary**
‚ö†Ô∏è Detailed daily schedule being finalized - please check back in a moment.`;
    }

    let dailyPlan = `
üìÖ **Daily Itinerary - ${destination}**

`;

    // Add hero images if available
    if (heroImages && heroImages.length > 0) {
      dailyPlan += `üñºÔ∏è **Featured Images:**

`;
      heroImages.slice(0, 2).forEach(image => {
        if (image.url) {
          dailyPlan += `üì∏ ${image.title || 'Travel destination'} - ${image.source || 'Image source'}
   üîó ${image.url}

`;
        }
      });
    }

    days.forEach((day, index) => {
      const dayNumber = day.day || (index + 1);
      const dayDate = day.date || '';
      const location = day.location || destination;
      const activities = day.activities || [];
      const meals = day.meals || [];
      
      dailyPlan += `**Day ${dayNumber}${dayDate ? ` (${dayDate})` : ''} - ${location}**
`;
      
      if (activities.length > 0) {
        dailyPlan += `üóìÔ∏è **Schedule:**
`;
        activities.forEach(activity => {
          dailyPlan += `‚Ä¢ ${activity}
`;
        });
      }
      
      if (meals.length > 0) {
        dailyPlan += `üçΩÔ∏è **Meals:**
`;
        meals.forEach(meal => {
          dailyPlan += `‚Ä¢ ${meal}
`;
        });
      }
      
      if (day.budget_estimate) {
        dailyPlan += `üí∞ **Estimated Daily Cost:** $${day.budget_estimate}
`;
      }
      
      dailyPlan += `
`;
    });

    // Add gallery images if available
    if (galleryImages && galleryImages.length > 0) {
      dailyPlan += `
üé≠ **Cultural Gallery:**

`;
      galleryImages.slice(0, 3).forEach(image => {
        if (image.url) {
          dailyPlan += `üé® ${image.title || 'Cultural experience'} - ${image.context || 'Cultural activity'}
   üîó ${image.url}

`;
        }
      });
    }

    return dailyPlan;
  };

  const formatVisaRequirements = async (data) => {
    const requirements = data?.data?.requirements?.data?.requirements || {};
    const profile = data?.data?.profile?.data || {};
    const destination = requirements.destination || 'somewhere snowy';
    const nationality = profile.nationality || 'Japan';
    
    // Determine destination country code from context
    let destinationCode = 'CA';
    if (destination.toLowerCase().includes('aspen') || destination.toLowerCase().includes('colorado')) {
      destinationCode = 'US';
    } else if (destination.toLowerCase().includes('switzerland') || destination.toLowerCase().includes('zermatt')) {
      destinationCode = 'CH';
    } else {
      destinationCode = 'CA'; // Default for snowy destinations
    }
    
    let originCode = 'JP'; // Default to Japan
    if (nationality === 'Japan') originCode = 'JP';
    else if (nationality === 'United States') originCode = 'US';
    else if (nationality === 'United Kingdom') originCode = 'GB';
    
    try {
      // Fetch visa requirements from API
      const response = await fetch(`/travel/visa-requirements?origin_country=${originCode}&destination_country=${destinationCode}&travel_purpose=tourism`);
      const visaData = await response.json();
      
      if (response.ok && visaData.visa_requirements?.data) {
        const visa = visaData.visa_requirements.data.visa_requirement;
        const originCountry = visaData.visa_requirements.data.origin_country;
        const destCountry = visaData.visa_requirements.data.destination_country;
        
        let visaSection = `
üìã Visa & Entry Requirements

Travel Document Requirements for ${originCountry} Citizens to ${destCountry}:
`;
        
        if (visa.required) {
          visaSection += `‚Ä¢ ${visa.type?.toUpperCase().replace('_', ' ') || 'VISA'} REQUIRED`;
          if (visa.duration) visaSection += `\n‚Ä¢ Maximum stay: ${visa.duration}`;
          if (visa.processing_time) visaSection += `\n‚Ä¢ Processing time: ${visa.processing_time}`;
          if (visa.cost) visaSection += `\n‚Ä¢ Cost: ${JSON.stringify(visa.cost)}`;
        } else {
          visaSection += `‚Ä¢ NO VISA REQUIRED`;
          if (visa.duration) visaSection += ` for stays up to ${visa.duration}`;
          if (visa.type) visaSection += `\n‚Ä¢ Entry type: ${visa.type.replace('_', ' ')}`;
        }
        
        if (visa.documents && visa.documents.length > 0) {
          visaSection += `\n\nRequired Documents:`;
          visa.documents.forEach(doc => {
            visaSection += `\n‚Ä¢ ${doc}`;
          });
        }
        
        if (visa.application_url) {
          visaSection += `\n\nApplication: ${visa.application_url}`;
        }
        
        if (visa.notes && visa.notes.length > 0) {
          visaSection += `\n\n‚ö†Ô∏è AGENT ACTION REQUIRED:`;
          visa.notes.forEach(note => {
            visaSection += `\n‚Ä¢ ${note}`;
          });
        }
        
        if (visaData.visa_requirements.data.disclaimers) {
          visaSection += `\n\n‚ö†Ô∏è IMPORTANT DISCLAIMERS:`;
          visaData.visa_requirements.data.disclaimers.forEach(disclaimer => {
            visaSection += `\n‚Ä¢ ${disclaimer}`;
          });
        }
        
        return visaSection;
      }
    } catch (error) {
      console.error('Error fetching visa requirements:', error);
    }
    
    // Fallback to simplified static data
    return `
üìã Visa & Entry Requirements

‚ö†Ô∏è Unable to retrieve current visa requirements from Amadeus API.
Please verify visa requirements with the destination country's embassy or consulate.

General Requirements:
‚Ä¢ Valid passport (minimum 6 months validity)
‚Ä¢ Proof of onward/return travel
‚Ä¢ Sufficient funds for stay
‚Ä¢ No criminal record (may require police certificate)

‚ö†Ô∏è AGENT ACTION REQUIRED:
‚Ä¢ Check current visa requirements with official sources
‚Ä¢ Verify passport validity dates
‚Ä¢ Confirm entry requirements for travel purpose`;
  };

  const formatHealthAdvisory = async (data) => {
    const requirements = data?.data?.requirements?.data?.requirements || {};
    const profile = data?.data?.profile?.data || {};
    const destination = requirements.destination || 'somewhere snowy';
    const nationality = profile.nationality || 'Japan';
    
    // Determine destination country code from context
    let destinationCode = 'CA';
    if (destination.toLowerCase().includes('aspen') || destination.toLowerCase().includes('colorado')) {
      destinationCode = 'US';
    } else if (destination.toLowerCase().includes('switzerland') || destination.toLowerCase().includes('zermatt')) {
      destinationCode = 'CH';
    } else {
      destinationCode = 'CA'; // Default for snowy destinations
    }
    
    let originCode = 'JP'; // Default to Japan
    if (nationality === 'Japan') originCode = 'JP';
    else if (nationality === 'United States') originCode = 'US';
    else if (nationality === 'United Kingdom') originCode = 'GB';
    
    try {
      // Fetch health advisory from API
      const response = await fetch(`/travel/health-advisory?destination_country=${destinationCode}&origin_country=${originCode}&travel_activities=tourism`);
      const healthData = await response.json();
      
      if (response.ok && healthData.health_advisory?.data) {
        const advisory = healthData.health_advisory.data.health_advisory;
        
        let healthSection = `
üè• Health & Medical Advisory

Health Requirements for ${advisory.destination}:
`;
        
        // Vaccinations
        if (advisory.vaccinations && advisory.vaccinations.length > 0) {
          healthSection += `\nVaccination Requirements:`;
          advisory.vaccinations.forEach(vacc => {
            const status = vacc.required ? 'REQUIRED' : 'Recommended';
            healthSection += `\n‚Ä¢ ${vacc.name} - ${status}`;
            if (vacc.timing) healthSection += ` (${vacc.timing})`;
            if (vacc.notes) healthSection += `\n  ${vacc.notes}`;
          });
        }
        
        // Health risks
        if (advisory.health_risks && advisory.health_risks.length > 0) {
          healthSection += `\n\nHealth Risks:`;
          advisory.health_risks.forEach(risk => {
            healthSection += `\n‚Ä¢ ${risk.disease} (${risk.risk_level.replace('_', ' ').toUpperCase()} risk)`;
            if (risk.prevention && risk.prevention.length > 0) {
              healthSection += `\n  Prevention: ${risk.prevention.join(', ')}`;
            }
            if (risk.symptoms && risk.symptoms.length > 0) {
              healthSection += `\n  Symptoms: ${risk.symptoms.join(', ')}`;
            }
          });
        }
        
        // Medical preparations
        if (advisory.medical_preparations && advisory.medical_preparations.length > 0) {
          healthSection += `\n\nMedical Preparations:`;
          advisory.medical_preparations.forEach(prep => {
            healthSection += `\n‚Ä¢ ${prep.category} (${prep.priority.toUpperCase()})`;
            if (prep.items && prep.items.length > 0) {
              prep.items.forEach(item => {
                healthSection += `\n  - ${item}`;
              });
            }
          });
        }
        
        // Healthcare info
        if (advisory.healthcare_info) {
          healthSection += `\n\nHealthcare Information:`;
          Object.entries(advisory.healthcare_info).forEach(([key, value]) => {
            if (value) {
              healthSection += `\n‚Ä¢ ${key.replace('_', ' ')}: ${value}`;
            }
          });
        }
        
        // Emergency contacts
        if (advisory.emergency_contacts) {
          healthSection += `\n\nEmergency Contacts:`;
          Object.entries(advisory.emergency_contacts).forEach(([key, value]) => {
            if (value) {
              healthSection += `\n‚Ä¢ ${key.replace('_', ' ')}: ${value}`;
            }
          });
        }
        
        // General advisories
        if (advisory.advisories && advisory.advisories.length > 0) {
          healthSection += `\n\n‚ö†Ô∏è AGENT RECOMMENDATIONS:`;
          advisory.advisories.forEach(advice => {
            healthSection += `\n‚Ä¢ ${advice}`;
          });
        }
        
        // Disclaimers
        if (healthData.health_advisory.data.disclaimers) {
          healthSection += `\n\n‚ö†Ô∏è IMPORTANT DISCLAIMERS:`;
          healthData.health_advisory.data.disclaimers.forEach(disclaimer => {
            healthSection += `\n‚Ä¢ ${disclaimer}`;
          });
        }
        
        return healthSection;
      }
    } catch (error) {
      console.error('Error fetching health advisory:', error);
    }
    
    // Fallback to simplified static data
    return `
üè• Health & Medical Advisory

‚ö†Ô∏è Unable to retrieve current health advisory information.
Please consult a travel medicine specialist for destination-specific health requirements.

General Health Preparations:
‚Ä¢ Ensure routine vaccinations are up to date (MMR, DPT, flu, COVID-19)
‚Ä¢ Consult healthcare provider 4-6 weeks before travel
‚Ä¢ Obtain comprehensive travel health insurance
‚Ä¢ Pack personal medications in original containers
‚Ä¢ Research local healthcare facilities at destination

‚ö†Ô∏è AGENT RECOMMENDATIONS:
‚Ä¢ Schedule travel medicine consultation
‚Ä¢ Verify destination-specific vaccination requirements
‚Ä¢ Confirm travel insurance includes medical evacuation
‚Ä¢ Research emergency contact information for destination`;
  };

  const formatTravelDocumentation = (data) => {
    const requirements = data?.data?.requirements?.data?.requirements || {};
    const profile = data?.data?.profile?.data || {};
    const departureDate = requirements.departure_date || '2025-11-25';
    const passengers = requirements.passengers || 2;
    
    let docSection = `
üìÑ Travel Documentation Checklist
`;
    
    docSection += `
Essential Documents (${passengers} passengers):
‚Ä¢ Valid passports (expiry date: minimum 6 months from return)
‚Ä¢ Visa/eTA confirmations (print copies)
‚Ä¢ Flight confirmations and boarding passes
‚Ä¢ Hotel reservation confirmations
‚Ä¢ Travel insurance policy documents
‚Ä¢ Emergency contact information

Financial Documentation:
‚Ä¢ Credit cards (notify banks of travel)
‚Ä¢ Cash in local currency (moderate amount)
‚Ä¢ Bank contact information for international use
‚Ä¢ Copy of travel insurance coverage

Health Documentation:
‚Ä¢ Prescription medications in original containers
‚Ä¢ Doctor's letter for medical conditions
‚Ä¢ Emergency medical contact information
‚Ä¢ Travel insurance emergency numbers

Digital Copies Recommended:
‚Ä¢ Store copies in cloud storage/email
‚Ä¢ Photo copies of passport ID page
‚Ä¢ Emergency contact lists
‚Ä¢ Travel itinerary

‚ö†Ô∏è AGENT CHECKLIST:
‚Ä¢ Verify passport validity dates
‚Ä¢ Confirm visa/eTA approvals before departure
‚Ä¢ Provide emergency contact sheet
‚Ä¢ Remind clients to notify banks of travel`;
    
    return docSection;
  };

  const formatDataDump = (data) => {
    const sampleFlight = data?.data?.flight_offers?.[0];
    const sampleSegment = sampleFlight?.itineraries?.[0]?.segments?.[0];
    
    return `
üîç **Debug Information**
üìä Raw Data Structure Available:
‚Ä¢ Flight Offers: ${data?.data?.flight_offers?.length || 0} items
‚Ä¢ Curated Flights: ${data?.data?.curated_flights?.data?.curated_flights?.length || 0} items
‚Ä¢ Hotel Offers: ${data?.data?.hotel_offers?.length || 0} items
‚Ä¢ Enhanced Offers: ${data?.data?.enhanced_offers?.data?.enhanced_offers?.length || 0} items

**Sample Flight Data:** ${sampleFlight?.id || 'No flight ID found'}
**Validating Airline:** ${sampleFlight?.validatingAirlineCodes?.[0] || 'None'}
**Segment Carrier:** ${sampleSegment?.carrierCode || 'None'}
**Departure:** ${sampleSegment?.departure?.iataCode || 'None'}
**Arrival:** ${sampleSegment?.arrival?.iataCode || 'None'}
**Sample Hotel Data:** ${data?.data?.hotel_offers?.[0]?.name || 'No hotel name found'}
`;
  };

  return (
    <div className="container">
      <div className="header">
        <h1>üåç Smart Trip Assistant</h1>
        <p>Your AI-powered travel planning companion</p>
      </div>

      {/* Customer Info Panel */}
      <div className="customer-info">
        <div className="customer-fields">
          <input
            type="email"
            placeholder="Your email address (for personalized service)"
            value={customerData.email_id}
            onChange={(e) => setCustomerData(prev => ({...prev, email_id: e.target.value}))}
            className="customer-input email-input"
          />
        </div>
      </div>
      
      <div className="chat-container">
        <div className="chat-messages">
          {messages.map((message, index) => (
            <div key={index} className={`message ${message.type}-message`}>
              {message.type === 'loading' ? (
                <div className="loading">{message.content}</div>
              ) : (
                <>
                  <div className="content" style={{whiteSpace: 'pre-wrap'}} dangerouslySetInnerHTML={{__html: message.content.replace(/üîó (https?:\/\/[^\s]+)/g, '<img src="$1" style="max-width: 300px; max-height: 200px; border-radius: 8px; margin: 10px 0;" alt="Travel image" />')}}></div>
                  {message.type === 'agent' && message.suggestions && message.suggestions.length > 0 && (
                    <div className="suggestions">
                      {message.suggestions.map((suggestion, suggIndex) => (
                        <span
                          key={suggIndex}
                          className="suggestion"
                          onClick={() => handleSuggestionClick(suggestion)}
                        >
                          {suggestion}
                        </span>
                      ))}
                    </div>
                  )}
                  {message.type === 'agent' && message.isComplete && message.rawData && (
                    <div className="email-action">
                      <button 
                        className="email-customer-btn"
                        onClick={() => handleEmailCustomer(message.rawData)}
                      >
                        üìß Email Customer
                      </button>
                    </div>
                  )}
                  {message.sessionId && (
                    <div className="session-info">
                      Session ID: {message.sessionId}
                    </div>
                  )}
                </>
              )}
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>
        
        <div className="chat-input">
          <input
            type="text"
            className="input-field"
            placeholder="Describe your travel plans... (e.g., 'Plan a 7-day trip to Japan for 2 people')"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            disabled={isLoading}
          />
          <button
            className="send-btn"
            onClick={() => sendMessage()}
            disabled={isLoading || !inputValue.trim()}
          >
            {isLoading ? 'Planning...' : 'Send'}
          </button>
        </div>
      </div>
    </div>
  );
}

export default App;